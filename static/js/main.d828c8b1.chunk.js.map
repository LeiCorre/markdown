{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sanitizeHtml","require","marked","setOptions","renderer","Renderer","headerIds","MarkdownPreviewer","props","state","input","updatePreview","bind","event","this","setState","target","value","id","className","onChange","dangerouslySetInnerHTML","text","__html","React","Component","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAOMA,G,MAAeC,EAAQ,KAC7BC,IAAOC,WAAW,CAChBC,SAAU,IAAIF,IAAOG,SACrBC,WAAW,I,IAaPC,E,kDACJ,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACXC,MAAM,+aAIR,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAPH,E,0DAWJC,GACZC,KAAKC,SAAS,CACZL,MAAOG,EAAMG,OAAOC,U,+BASxB,OACE,yBAAKC,GAAG,YAAYC,UAAU,mBAC5B,wBAAIA,UAAU,QAAd,sBACA,yBAAKA,UAAU,OAGf,yBAAKD,GAAG,QAAQC,UAAU,YAC1B,wBAAIA,UAAU,WAAd,WACA,8BAAUD,GAAG,SAASD,MAAOH,KAAKL,MAAMC,MAAOU,SAAWN,KAAKH,iBAI/D,yBAAKO,GAAG,QAAQC,UAAU,YACxB,wBAAIA,UAAU,WAAd,YACA,yBAAKD,GAAG,UAAWG,yBA5CHC,EA4C0CpB,IAAOY,KAAKL,MAAMC,OA3ChFV,EAAasB,GACN,CAACC,OAAQD,OA4Cd,yBAAKJ,GAAG,QAAQC,UAAU,YAC1B,wBAAIA,UAAU,WAAd,SACA,yBAAKD,GAAG,QACLhB,IAAOY,KAAKL,MAAMC,UAKrB,wBAAIS,UAAU,QAAd,gCAtDJ,IAAsBG,M,GAOME,IAAMC,WAuDtCC,IAASC,OAAO,kBAAC,EAAD,MAAuBC,SAASC,eAAe,SAChDtB,QCnEKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFP,SAASC,eAAe,SDyHpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d828c8b1.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport marked from 'marked';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nconst sanitizeHtml = require('sanitize-html');\nmarked.setOptions({\n  renderer: new marked.Renderer(),\n  headerIds: false\n}\n)\n\n\n\n    function convertText (text) {\n      sanitizeHtml(text)\n      return {__html: text};\n    }\n\n\n\nclass MarkdownPreviewer extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      input: `# This is H1 Text \\n ## This is H2 Text  \\n [This is a link to FreeCodeCamp](https://www.freecodecamp.org/) \\n\\n   An example of some \\`inline code\\` and if you want more... \\n\\n \\`\\`\\`This is the lovely codeblock, which can hold even larger amounts of text\\`\\`\\` \\n\\n 1. Just \\n 1. Numbers \\n 1. Here \\n\\n   >  Block Quotes may be the wave of the future \\n \\n ![Kitty](https://i.ibb.co/TTDt41Z/cat.png) \\n\\n **Bold Moves are welcome**`,\n      \n    }\n\n    this.updatePreview = this.updatePreview.bind(this);\n    \n    \n  }\n    updatePreview(event) {\n      this.setState({\n        input: event.target.value\n      })\n    }\n\n    \n\n    \n  render() {\n    \n    return (\n      <div id=\"container\" className=\"container-fluid\"> \n        <h1 className=\"head\">Markdown Previewer</h1>\n        <div className=\"row\">\n          \n               \n        <div id=\"div-1\" className=\"col-sm-4\"> \n        <h3 className=\"subHead\">editor.</h3>\n        <textarea id=\"editor\" value={this.state.input} onChange ={this.updatePreview} >\n        \n        </textarea>\n        </div> \n        <div id=\"div-2\" className=\"col-sm-4\">\n          <h3 className=\"subHead\">preview.</h3>\n          <div id=\"preview\"  dangerouslySetInnerHTML = {convertText(marked(this.state.input))}  />\n         </div> \n        <div id=\"div-3\" className=\"col-sm-4\">\n        <h3 className=\"subHead\">html.</h3>  \n        <div id=\"code\" >\n          {marked(this.state.input)}\n        </div>\n        </div> \n         \n        </div>\n        <h3 className=\"foot\">Designed by LeiCorre &hearts;</h3>\n      </div>\n      \n    )\n  }\n  \n} \n\nReactDOM.render(<MarkdownPreviewer />, document.getElementById(\"root\")) \nexport default MarkdownPreviewer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}